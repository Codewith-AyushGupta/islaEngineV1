/*
*************************************************************************************************************************************
*************************************************************************************************************************************
********************* Step 0: Create Data Lake												***************************************
*************************************************************************************************************************************
*************************************************************************************************************************************
*/


--THIS IS DONE ON API UPLOAD SNA
-- read from the public s3 file. Then write to the folder structure.
-- SELECT * FROM readJSON(s3), write to paritioned BY year/month/date

/*
*************************************************************************************************************************************
*************************************************************************************************************************************
********************* Step 1: Read from Data Lake												***************************************
*************************************************************************************************************************************
*************************************************************************************************************************************
*/

-- Step 1: read from data lake

CREATE OR REPLACE TABLE data_lake_transactionFees AS
SELECT 
    *
FROM read_ndjson(
    '${s3BucketRoot}/tenants/tenantid=${tenantId}/tablename=transactionFees/*/*.jsonl.gz',
    hive_partitioning = true
);



/*
*************************************************************************************************************************************
*************************************************************************************************************************************
********************* Step 2: Create Models	(no files here below)									***************************************
*************************************************************************************************************************************
*************************************************************************************************************************************
*/

-- create orders
CREATE OR REPLACE TABLE model_transactionFees AS
SELECT 
    feePerc :: DOUBLE,
	name :: VARCHAR,
	applyOnCountries :: BOOLEAN,
	id :: DOUBLE,
	fixedFee :: DOUBLE,
	countries,
	COALESCE(NULLIF(currencyConversionFee, ''), '0')::DOUBLE AS currencyConversionFee,
	strftime(snapshotDate, '%Y-%m') AS iso_month,
	strftime(snapshotDate, '%Y') AS iso_year,
	strftime(snapshotDate, '%Y-%m-%d') AS iso_date,
	strftime(snapshotDate, '%G-W%V') AS iso_week
FROM data_lake_transactionFees;

/*
*************************************************************************************************************************************
*************************************************************************************************************************************
********************* Step 3: WRITE TO OUTPUT TABLES											***************************************
*************************************************************************************************************************************
*************************************************************************************************************************************
*/
-- Step 3: output

COPY model_googleAds TO '${s3BucketRoot}/tenants/tenantid=${tenantId}/transposed-output/tablename=transactionFees/transactionFees.parquet'
(FORMAT parquet, COMPRESSION zstd);


--
--COPY model_googleAds TO '${s3BucketRoot}/tenants/tenantid=${tenantId}/transposed-output/tablename=model_googleAds'
--(FORMAT parquet, COMPRESSION zstd, PARTITION_BY (iso_year), OVERWRITE_OR_IGNORE TRUE, FILENAME_PATTERN 'part_{i}');
--
--


